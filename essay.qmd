---
title: Celebrity Private Jet Data Analysis
jupyter: python3
---


### Julian Shah, Yunzhu Chen

## Introduction

Why should a select few be allowed to contribute so much more than
others to climate change compared to the average person? Simply because
they have more money? How much more do they contribute than the average
person anyway? Is it more nuanced than just ‘the super rich’?

In this essay we seek to answer the last two questions. We will be
analysing the wealth of individuals who have private jets in comparison
to their jet usage, the kind of celebrity they are, and more so that
people can be informed in their anger and have just one more - or less -
reason to spite the uber rich.

We hope that one day, this essay will contribute to the monumental task
of regulating extreme wealth and exuberance so that we have a more fair
society that doesn’t burden the poor for a problem where the rich are
more responsible.

The celebrities and data we use come from the leaderboard of
***[celebrityprivatejettracker.com](https://celebrityprivatejettracker.com/)***.
Please feel free to check out the site.

(In the introduction, you should aim to tell the reader what your
project is about. In doing so, you should answer the following
questions:

What is the question you are trying to answer or the story that you are
trying you tell? Why is this question or story important? What were the
main steps your project made towards answering the question or telling
the story? Beyond answering these questions, you are free to structure
this section however you wish.)

## Setup Instructions

Before we begin your rage fueled adventure please follow these simple
instructions. Don’t worry, it won’t take more than a few minutes.

**\*\*\*If you ever think about stopping half way, just think about the
overbearing and overzealous oligarchy that watches from above and you
should find a renewed vigor sputter to life within you\*\*\***

caution: those around you may see fire in your eyes when you do this
exercise

### Requirements

This project runs in Python 3.1x. Please ensure that you have an
appropriate version of python installed and kernel selected (in VSCode
you can choose your kernel in the top right where it says "select
kernel").

The requirements.txt file contains all the dependencies to run this
project. To install all the requirements, we will be using pip. Usually,
pip comes preinstalled with python. To check that you have pip run:

    pip --version

in BASH shells (MacOS/Linux) or:

    python -m pip --version

in Windows. On the off chance that you have python and not pip, please
follow [this guide from the pip
documentation](https://pip.pypa.io/en/stable/installation/).

Once you have pip installed you can run

    pip install -r requirements.txt

in BASH shells (MaxOS/Linux) or:

    pip install --upgrade -r requirements.txt

### API Key

An API key from [api-ninjas.com](https://www.api-ninjas.com/) is
required to run this project. You need to create an account to create
your own API key. If you do not already have an account you can create
it [here](https://www.api-ninjas.com/register).

NOTE: The api key from api-ninjas has a max calls of 10000 per month.
This essay uses ~70 every time it runs so consider changing

    GATHER_API_DATA = False

in order to stop calling the api after you’ve run it the first time.

Once you have your account you need to retrieve your key and place it
within the keys.py file.

First, retrieve your key by copying it from the [api-ninjas profile
page](https://www.api-ninjas.com/profile). You will have to click ‘Show
API Key’ to see and copy your key in the profile page.

Next, open the keys.py file and and paste your key in between the
quotation marks, replacing YOUR API KEY HERE with your key. It should go
from this:

    def get_ninja_key():
        return "YOUR API KEY HERE"

to something like this:

    def get_ninja_key():
        return "ABC1234xyz7890-FAKEKEY0987654321"

The last thing you have to do is run the code cell below in order to get
matplotlib, which we use for visualizations, to work.


```{python}
%matplotlib inline 
%load_ext autoreload
%autoreload 2
```

#### You are now ready to begin your journey!

## Methodology, Data Collection, & Processing

Here is an introduction of all the data we got, how did we get them, and how did we process them.


### Jet Data

This project is structured around data retrieved from
[celebrityprivatejettracker.com](https://celebrityprivatejettracker.com/leadeerboard).
The leaderboard contains 63 celebrities with private jets (as of
03/27/2025) which we scraped using the python requests library.

We put all of the retrieval code into ***manipulate_data.py*** so we
start by importing that. Then we can call the function

    get_flighttracking()

which, by default, gets all of the html from the
**https://celebrityprivatejettracker.com/leadeerboard** site and writes
it to ***./Data/data_flighttracker.html***

```{python}
import manipulate_data
manipulate_data.get_flighttracking()
```

If you’d like to see what the html looks like go to the file where it is
saved. It’s quite long thought and pretty messy, which leads us to the
next point: we’ve gotta clean our data.

to accomplish this we are going to use another one of the handy,
functions we’ve writting in manipulate data. It’s called

    get_celeb_tracking()

This one uses beautifulsoup4, a powerful html parser, to put snippets of
html for each celebrity into a list. It works well because the
leaderboard on celebrityjettracker is organized into a table so we can
look for the tag at the head of each row of the table.

```{python}
celebrity_data_chunks = manipulate_data.get_celeb_chunks()
```

The next function we’re going to run extracts the celebrity name and
data from the larger list of data chunks we give it. It returns a
dictionary (which is a data type in python) so that we can begin
visualizing the data.

    get_celeb_data(celebrity_data_chunks)

```{python}
celebrity_data = manipulate_data.get_celeb_data(celebrity_data_chunks)
```

But wait! We can’t acutally use this yet. Guess what, we’ve “hit a
crucial part of data analysis” (your professor says over your shoulder
with a wild grin on their face).

Unfortunately, the data is not yet usable. We need to clean it. Now, we
snuck in some data cleaning already in the last function. Some of the
scraped data contained ‘Non-breaking’ spaces which we needed to replace
with normal spaces. Also, some of the names we scraped were wrong and we
replaced those.

That was light work though. Now it’s time put on our rubber gloves and
clean up some mercury. This next function removes cleans our data so
that we can access the numbers to do our visualization.

    clean_all_data(celebrity_data_chunks)

Each pair will now be in this order

    {"CELEBRITY NAME": ["Jet Model", "Tail Registration", "Total Miles Flown", "Total Flights", "Total Gallons of Fuel Used", "Total Hours of Flight", "Metric Tons of C02 Released"]}

and makes it into something like

    {"Imaginary Celebrity": ["Learjet 60", "J420ET", "100000", "1", "1010", "0.1", "100000000000000000000000000000000000"]}

It does this for every celebrity.

Crucially, this changes the already existing dictionary so it doesn’t
need to be set equal to a return value

```{python}
manipulate_data.clean_all_data(celebrity_data)
```

The final function we’re going to run is a function that combines
duplicates. Many of the celebrities here are soooo wealthy that they
own, or have owned, multiple jets in their lifetime. In this case, we
need to synchronise their data using:

    combine_duplicates(celebrity_data)

```{python}
accountable_data = manipulate_data.combine_duplicates(celebrity_data)
```

Yay! You’ve now got nicely formatted data for further processing.

### API Ninjas Data

After all that work, you may be asking ’what about that API key you
**made** me retrieve earlier. Don’t worry, we’re getting to that now.

This API is used to get the net worth of celebrities through code.
Transparently, we don’t actually know where this data is being sourced
from. However, after doing some simple cross referencing (make api call
for net worth and compare result to sites like Forbes.com net worth
ranking) to determine this data is accurate **enough** for fueling your
rage (or not, we’ll see).

The next function will make an API call from the website, and write the raw data into a file called "raw_api_info.csv" in the Data folder. With this file, you will have everything we need from the website stored locally, so that you won't need to request the data again every time you want to get the data. It is suggested to only run this function once, so that you don't waste your limited times of API call (although you have 10k calls per month, which is far more than enough for this project, so feel free to run it multiple times anyways).

    get_celeb_data(celebrity_data_chunks)

```{python}
manipulate_data.get_celeb_info_wapi(accountable_data)
```

The data is stored in strings due to the unusability of the json file from the website. In the file "celebrity_info_scrap.py", we'll extract the useful parts from it and convert them to more usable dictionaries with the function:

    get_net_worth()



### Wikipedia Data
Now with all the necessary information, let's get some more information of each celebrity from our trusted source Wikipedia.  

In "celebrity_info_scrap.py", you'll see the following two functions:

    get_occupations(), get_age()
which access the infobox of the given celebrity and get us their occupation(s) and age from it. For categorization, the function:
    
    decide_occupation()
will devide the celebrities into five categories:   
- Business & Politics
- Music
- Movie
- TV & Media
- Sports  

For more detailed information about the critera, check the variable called *categories* in this function.


## Final processing and organization
Once the "celebrity_info_scrap.py" script has gathered all the data, we can organize it and write it to a JSON file, making it more accessible and easier to visualize. The following function handles this process for you in one step:
    
    get_jet_owner_info()

This might take upwards of 60 seconds because we
are accessing wikipedia for each of our celebrities. Please be patient,
your rage should peter at this stage.

```{python}
manipulate_data.get_jet_owner_info(accountable_data)
```

It writes all the information we care about into "Data/jet_owners_info.json", where each line contains a list with the celebrity's name, occupation, age, and net worth (if available). While this format may not be the most convenient for immediate use, the function:
    
    create_dict()
converts the data into a dictionary format, making it even easier to use for visualization.


## Results

### Visualizations

Ok, here we go, lets make some visualisations. First lets import the
visualizations file. 

```{python}
import visualization
```

Now lets plot our plots. After each one we’re going to include a caption
to help you understand what you’re looking at.

```{python}
name_list = list(accountable_data.keys())
jet_miles = []
for _, value in accountable_data.items():
    jet_miles.append(value[0])
visualization.plot_jet_miles_distribution(name_list, jet_miles)
```

Here we have a lovely, if a bit unreadable, pie chart with the breakdown
of miles flown per celebrity. Notice that Bill Gates has by far the
largest portion of the pie followed by Michael Bloomberg and Eric Scmidt. Bill Gates has
publicly stated that it is okay for him to fly in his private jet
because he donates so much of his money to the climate.

```{python}
visualization.plot_emissions_by_occupation()
```

Here we see the average CO2 emissions by occupation. Music takes the
largest lead in this department, followed by TV & Media and Business & Politics.

```{python}
visualization.plot_emissions_by_age()
```

Here we see that the Below 40 agegroup is by far the largest pollutor
with private jets, with emissions seeming to decrease as age increases. Considering that monumental sums of wealth are often
possessed by the older class this is very interesting.

```{python}
visualization.plot_emissions_by_net_worth()
```

Interestingly, a similar pattern emerges for the net worth groups, where the less wealthy individuals (Below 100M) contribute the most pollution. This could be due to the smaller sample size in this group, where outliers have a fairly large impact on the average. Excluding this, the remaining data shows a upward trend, indicating that the wealthiest billionaires (Above 10B) are more responsible for carbon emissions.

### Summaries and Interpretation
The analysis of CO2 emissions from private jet usage reveals some notable patterns. 
Among occupations, the music industry leads in emissions, followed by TV & Media and Business & Politics. This could mean that these kind of celebrities have a more frequent need of air travel.
In terms of age groups, the Below 40 age group emerges as the largest contributor to pollution from private jet use, with emissions gradually decreasing as age increases. It's probably because younger people's active careers and lifestyle, with more frequent travel for work and leisure.
For net worth, individuals with a net worth below 100 million are the most significant polluters, while the rest of the data shows an upward trend. Generally, it indicates that wealthier individuals are more responsible for carbon emissions.


## Conclusion

Our main conclusions for private jets are:  
- Bill Gates is the largest individual polluter
- Music is the most pollutive industry
- The below 40 years old age group is the largest polluter
- Carbon emissions are positively correlated with net worth in general

### Key Takeaways

Considering that the average car emits around 4.6 metric tons of CO2
anually, the average individual in the below 40 age group is over 1200
times more pollutant than your average car owner just from their private
jet. Even the lowest age group, ages 60-69 is over 400 times more
pollutant than your average car owner.

### Ethical Considerations

Now, we *are* scraping. Scraping can be used in ways that maximize
personal gain while sacrificing open source project websites like
celebrityjettracker.com. In this case, however, there is no fiscal or
exploitive benefit we are gaining by using celebrityjettracker. there is
little personal gain (no fiscal output is retrieved from this project)

### Challenges and Restrictions

Now, this list is a good general baseline but may not be super accurate.
For one, the data from api-ninjas is not from a clear source and cannot
be perfectly verified. For another, the small size of the dataset might lead to skewed average result due to extreme outliers. Additionally, those super rich that really don’t
want their flights tracked can simple rent different private jets and
switch often. An example of such a scenario is Billionaire Bernard
Arnault, owner of LMVH. For this reason, we have no data on him despite
him using private jets often. 

### Future Work

This project should expand at the same pace that celebrities are added
to the celebrityjettracker.com leaderboard. Since we are so heavily
reliant on it this project cannot be easily expanded.

However, there are some avenues. For example, a deeper look into the
data could provide even more insights that we were able to find. One
thing we didn’t look at is educational level. This project could be
expanded in many ways and we are totally happy if you do so!

